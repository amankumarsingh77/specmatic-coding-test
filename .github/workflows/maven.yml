# This workflow will build a Java project with Maven and run Specmatic contract tests

name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [17]
        go: [1.22]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        path: main

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: 'oracle'
        java-version: ${{ matrix.java }}

    - name: Set up Go ${{ matrix.go }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        check-latest: true

    - name: Build and Vet Go Service
      working-directory: main/go-service
      run: |
        go vet ./...

    - name: Start Go Service
      working-directory: main
      shell: bash
      env:
        PORT: ":8090"
        SERVER_PORT: "0"
      run: |
        pushd go-service
        go run . &
        GO_PID=$!
        popd
        echo "Go service started with PID $GO_PID"
        echo $GO_PID > go_service.pid
        sleep 5

    - name: Download Specmatic JAR
      working-directory: main
      run: |
        curl -L -o specmatic.jar https://github.com/znsio/specmatic/releases/latest/download/specmatic.jar

    - name: Run Specmatic Contract Tests
      working-directory: main
      shell: bash
      env:
        SPECMATIC_OAUTH2_TOKEN: ""
        CUSTOM_RESPONSE: "false"
        SPECMATIC_GENERATIVE_TESTS: "true"
        ONLY_POSITIVE: "false"
      run: |
        java "-DendpointsAPI=http://localhost:8090/actuator/mappings" \
             -jar specmatic.jar \
             test "./products_api.yaml" \
             --testBaseURL "http://localhost:8090"

    - name: Stop Go Service
      working-directory: main
      shell: bash
      run: |
        if [ -f go_service.pid ]; then
          PID=$(cat go_service.pid)
          echo "Killing Go service with PID $PID"
          kill $PID || true
        fi
